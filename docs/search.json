[{"path":"https://hzaCode.github.io/Athlytics/articles/Athlytics-introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to Athlytics","text":"Athlytics R package simplifies advanced analysis athletic performance training load using data sourced directly Strava API. provides functions fetch Strava data (via rStrava package), calculate key metrics based sports science principles, generate insightful visualizations training monitoring. vignette covers: Installation Authentication Strava API Overview examples core analysis functions","code":""},{"path":"https://hzaCode.github.io/Athlytics/articles/Athlytics-introduction.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to Athlytics","text":"can install released version Athlytics CRAN (available) : Alternatively, install development version GitHub:","code":"# install.packages(\"Athlytics\") # install.packages('remotes') # If needed # remotes::install_github('HzaCode/Athlytics')"},{"path":"https://hzaCode.github.io/Athlytics/articles/Athlytics-introduction.html","id":"authentication-with-strava","dir":"Articles","previous_headings":"","what":"Authentication with Strava","title":"Introduction to Athlytics","text":"Athlytics requires valid Strava API token fetch data. handled using rStrava package. Go https://www.strava.com/settings/api. Create application (e.g., “Athlytics App”). Set “Authorization Callback Domain” localhost. Note Client ID Client Secret. Use rStrava::strava_oauth(). Using cache = TRUE highly recommended securely store token avoid re-authenticating every session. Important: following examples use stoken = stoken_placeholder eval=FALSE. need replace stoken_placeholder actual token object (stoken) potentially set eval=TRUE running interactively valid, cached token.","code":"# --- Example Authentication Code --- # (Do not run this block directly in the vignette build)  # Replace with your actual credentials or use environment variables # app_name <- 'MyAthlyticsApp'  # client_id <- \"YOUR_CLIENT_ID\"  # client_secret <- \"YOUR_SECRET\"  # This function performs the OAuth handshake (may open browser) # stoken <- rStrava::strava_oauth( #   app_name, #   client_id = client_id, #   client_secret = client_secret, #   app_scope = \"activity:read_all\", # Ensure necessary scopes #   cache = TRUE # IMPORTANT: caches the token # )  # For the examples below, we assume you have obtained a valid token # object named 'stoken' in your interactive R session. # Replace this placeholder line if running interactively: stoken_placeholder <- \"<Replace this string with your actual stoken object>\"  # You would use the real 'stoken' object in function calls, e.g.: # some_data <- calculate_acwr(stoken = stoken, ...)"},{"path":"https://hzaCode.github.io/Athlytics/articles/Athlytics-introduction.html","id":"example-analysis-visualizations","dir":"Articles","previous_headings":"","what":"Example Analysis Visualizations","title":"Introduction to Athlytics","text":"functions generate plots analyze trends performance.","code":""},{"path":"https://hzaCode.github.io/Athlytics/articles/Athlytics-introduction.html","id":"load-exposure-acute-vs--chronic","dir":"Articles","previous_headings":"Example Analysis Visualizations","what":"1. Load Exposure (Acute vs. Chronic)","title":"Introduction to Athlytics","text":"Visualizes relationship short-term (acute) long-term (chronic) training load assess readiness potential injury risk. Note TSS/HRSS calculations based activity summaries approximations.","code":"# Calculate using approximate TSS for Rides (Requires FTP) exposure_data_tss <- calculate_exposure(     stoken = stoken_placeholder,      activity_type = \"Ride\",     load_metric = \"tss\",     user_ftp = 280, # Example FTP, replace with yours     acute_period = 7,     chronic_period = 28 )  # Plot the result plot_exposure(exposure_data = exposure_data_tss, risk_zones = TRUE)  # Calculate using approximate HRSS for Runs (Requires Max & Resting HR) hrss_data <- calculate_exposure(     stoken = stoken_placeholder,     activity_type = \"Run\",     load_metric = \"hrss\",     user_max_hr = 190,     # Example Max HR     user_resting_hr = 50, # Example Resting HR     acute_period = 7,     chronic_period = 42 )  plot_exposure(exposure_data = hrrss_data, risk_zones = TRUE)"},{"path":"https://hzaCode.github.io/Athlytics/articles/Athlytics-introduction.html","id":"acwr-trend","dir":"Articles","previous_headings":"Example Analysis Visualizations","what":"2. ACWR Trend","title":"Introduction to Athlytics","text":"Tracks Acute:Chronic Workload Ratio time, highlighting periods potentially risky load increases.","code":"# Calculate ACWR using duration for Runs acwr_data_run <- calculate_acwr(     stoken = stoken_placeholder,     activity_type = \"Run\",     load_metric = \"duration_mins\",     acute_period = 7,     chronic_period = 28 )  # Plot the trend plot_acwr(acwr_data = acwr_data_run, highlight_zones = TRUE)"},{"path":"https://hzaCode.github.io/Athlytics/articles/Athlytics-introduction.html","id":"efficiency-factor-ef-trend","dir":"Articles","previous_headings":"Example Analysis Visualizations","what":"3. Efficiency Factor (EF) Trend","title":"Introduction to Athlytics","text":"Monitors aerobic efficiency, typically calculated output (Pace Power) divided input (Heart Rate). Requires activities relevant metrics.","code":"# Calculate EF (Pace/HR) for Runs and Rides ef_data_pacehr <- calculate_ef(     stoken = stoken_placeholder,     activity_type = c(\"Run\", \"Ride\"),     ef_metric = \"Pace_HR\" )  # Plot the trend plot_ef(ef_data = ef_data_pacehr, add_trend_line = TRUE)"},{"path":"https://hzaCode.github.io/Athlytics/articles/Athlytics-introduction.html","id":"personal-bests-pbs","dir":"Articles","previous_headings":"Example Analysis Visualizations","what":"4. Personal Bests (PBs)","title":"Introduction to Athlytics","text":"Visualizes progression estimated best efforts various distances (currently primarily running). Note: Fetching PB data can slow API-intensive.","code":"# Calculate PBs for 1k, 5k, 10k Runs # Limit activities checked for speed pb_data_run <- calculate_pbs(     stoken = stoken_placeholder,     distance_meters = c(1000, 5000, 10000),     activity_type = \"Run\",     max_activities = 50 # Limit for example )  # Plot the progression, highlighting new PBs plot_pbs(pb_data = pb_data_run)"},{"path":"https://hzaCode.github.io/Athlytics/articles/Athlytics-introduction.html","id":"decoupling-trend","dir":"Articles","previous_headings":"Example Analysis Visualizations","what":"5. Decoupling Trend","title":"Introduction to Athlytics","text":"Assesses cardiovascular drift activities comparing performance (Pace Power) first half vs. second half relative Heart Rate. Note: Fetching decoupling data now uses direct Strava API calls via httr (instead rStrava::get_activity_streams) obtain detailed activity streams. can slow may hit API rate limits easily, especially many activities. Consider using max_activities parameter.","code":"# Calculate Pace/HR decoupling for Runs # Limit activities checked for speed decoupling_data_run <- calculate_decoupling(     stoken = stoken_placeholder,     activity_type = \"Run\",     decouple_metric = \"Pace_HR\",     max_activities = 20 # Limit for example )  # Plot the trend plot_decoupling(decoupling_data = decoupling_data_run, add_trend_line = TRUE)"},{"path":"https://hzaCode.github.io/Athlytics/articles/Athlytics-introduction.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further Information","title":"Introduction to Athlytics","text":"vignette provides basic overview. details specific functions, parameters, underlying calculations, please consult function help pages (e.g., ?calculate_acwr, ?plot_acwr) R. bug reports feature requests, please use GitHub repository issues tracker: https://github.com/HzaCode/Athlytics/issues","code":""},{"path":"https://hzaCode.github.io/Athlytics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ang. Author, maintainer.","code":""},{"path":"https://hzaCode.github.io/Athlytics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ang (2025). Athlytics: Advanced Sports Performance Analysis 'Strava' Data. R package version 0.1.0, https://github.com/HzaCode/Athlytics.","code":"@Manual{,   title = {Athlytics: Advanced Sports Performance Analysis for 'Strava' Data},   author = {{Ang}},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/HzaCode/Athlytics}, }"},{"path":[]},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Advanced Sports Performance Analysis for Strava Data","text":"development repository Athlytics, R package designed simplify analysis athletic performance training load data sourced directly Strava API. package provides functions fetching Strava data, calculating key metrics, generating insightful visualizations training monitoring.","code":""},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Advanced Sports Performance Analysis for Strava Data","text":"can install released version Athlytics CRAN (available) : Alternatively, development version repository can installed follows:","code":"install.packages(\"Athlytics\") # install.packages('remotes') remotes::install_github('HzaCode/Athlytics')"},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"using-athlytics-functions","dir":"","previous_headings":"","what":"Using Athlytics Functions","title":"Advanced Sports Performance Analysis for Strava Data","text":"","code":"library(Athlytics)"},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"authentication-with-strava-using-rstrava","dir":"","previous_headings":"","what":"Authentication with Strava (using rStrava)","title":"Advanced Sports Performance Analysis for Strava Data","text":"Athlytics requires authenticate Strava using rStrava package. generates token pass Athlytics functions. Go Strava API documentation page (https://developers.strava.com/docs/reference/) find instructions creating application (’ll likely need navigate settings page logged ). Create new API application (e.g., “Athlytics Analysis”). Set “Authorization Callback Domain” localhost. Note Client ID Client Secret. function handles OAuth2.0 flow, potentially opening browser window authorization. returns Token2.0 object needed Athlytics. Use cache = TRUE (default) store token securely (.httr-oauth), avoiding re-authentication later sessions. Note: Running strava_oauth() may open browser window log Strava authorize application.","code":"library(Athlytics)  # Sys.setenv(STRAVA_CLIENT_ID = \"YOUR_CLIENT_ID\") # Sys.setenv(STRAVA_CLIENT_SECRET = \"YOUR_SECRET\")  # --- Authentication Step --- app_name <- 'MyAthlyticsApp' # Choose a name client_id <- Sys.getenv(\"STRAVA_CLIENT_ID\") client_secret <- Sys.getenv(\"STRAVA_CLIENT_SECRET\")  # Authenticate using rStrava and STORE the token object # Make sure app_scope allows reading activities. stoken <- rStrava::strava_oauth(app_name,                                 app_client_id = client_id, # Use app_client_id                                 app_secret = client_secret, # Use app_secret                                 app_scope = \"activity:read_all\", # Or specific scope needed                                 cache = TRUE) # IMPORTANT for reusing the token"},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"optional-parameters-for-specific-metrics","dir":"","previous_headings":"","what":"Optional Parameters for Specific Metrics","title":"Advanced Sports Performance Analysis for Strava Data","text":"functions rely data directly available Strava (like duration, distance, heart rate), advanced calculations metrics may require additional user-specific information. user_ftp (Numeric): Functional Threshold Power (Watts). Needed calculating TSS (approximate) power zones cycling/running power. user_max_hr (Numeric): maximum heart rate. Needed calculating HRSS (approximate). user_resting_hr (Numeric): resting heart rate. Also needed calculating HRSS (approximate). (Provide parameters directly Athlytics function call chosen load_metric analysis requires . Check function documentation details.)","code":""},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"example-analysis-visualizations","dir":"","previous_headings":"","what":"Example Analysis Visualizations","title":"Advanced Sports Performance Analysis for Strava Data","text":"functions generate plots analyze trends performance, using data fetched processed Strava via stoken provide. Important Note API Usage Performance: functions, particularly calculate_pbs (needs fetch detailed data activity) calculate_decoupling (now uses httr directly fetch detailed activity streams), can slow may hit Strava API rate limits (leading errors) analyze large number activities. Consider using max_activities parameter functions analyzing shorter date ranges encounter issues.","code":""},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"id_1-load-exposure","dir":"","previous_headings":"","what":"1. Load Exposure","title":"Advanced Sports Performance Analysis for Strava Data","text":"analysis provides intuitive way assess current training load status potential injury risk level plotting acute vs. chronic load. can clearly see load combination falls within defined risk zones (like sweet spot, caution zone, danger zone). Note: using TSS HRSS load_metric, calculation approximation based average power average heart rate available Strava activity summary, detailed stream data (much slower process). Calculating Data: get underlying data (date, daily_load, atl, ctl, acwr) data frame without plotting: Plotting:","code":"# Ensure stoken is a valid token object from rStrava::strava_oauth() # Ensure user_ftp = 280 is appropriate for the user exposure_data <- calculate_exposure(     stoken = stoken,     activity_type = \"Ride\", # Example: Target Rides     load_metric = \"tss\",    # Example: Use approximate TSS based on average power     user_ftp = 280,         # REQUIRED for TSS     acute_period = 7,     chronic_period = 28 ) # print(tail(exposure_data)) # Uncomment to view # Example using approximated TSS based on avg power for Rides # Ensure stoken is valid and user_ftp = 280 is correct plot_exposure(     stoken = stoken,     activity_type = \"Ride\",        # Specify activity type(s)     load_metric = \"tss\",           # Use approximate TSS     user_ftp = 280,                # REQUIRED for TSS     acute_period = 7,              # Duration (days) for acute load calculation     chronic_period = 28            # Duration (days) for chronic load calculation     # , end_date = Sys.Date()      # Optional     # , risk_zones = TRUE          # Optional )  # Example using approximate HRSS based on avg heart rate for Runs # Ensure stoken is valid and HR parameters are correct plot_exposure(     stoken = stoken,     activity_type = \"Run\",         # Specify activity type(s)     load_metric = \"hrss\",          # Use approximate HRSS     user_max_hr = 190,             # REQUIRED for HRSS     user_resting_hr = 50,          # REQUIRED for HRSS     acute_period = 7,              # Duration (days) for acute load calculation     chronic_period = 42            # Example: Longer chronic window     # , end_date = Sys.Date()      # Optional     # , risk_zones = TRUE          # Optional )  # Alternatively, plot pre-calculated data: # plot_exposure(exposure_df = exposure_data)"},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"id_2-acwr-trend","dir":"","previous_headings":"","what":"2. ACWR Trend","title":"Advanced Sports Performance Analysis for Strava Data","text":"analysis, can monitor rate change training load time, helping identify periods rapid increases might lead overtraining heightened injury risk. ’s valuable tool periodized training monitoring risk management. Note: calculate_exposure also calculates ACWR part output, calculate_acwr function focuses specifically ACWR metric associated plot. Calculating Data: get underlying ACWR data (date, acwr, acwr_smooth) data frame: Plotting:","code":"# Ensure stoken is valid acwr_data <- calculate_acwr(     stoken = stoken,     activity_type = \"Run\",     load_metric = \"duration_mins\",     acute_period = 7,      chronic_period = 28 ) # print(tail(acwr_data)) # Uncomment to view # Ensure stoken is valid plot_acwr(     stoken = stoken,     activity_type = \"Run\",         # Specify activity type(s), e.g., \"Run\", \"Ride\", NULL for all     load_metric = \"duration_mins\", # Choose metric: \"duration_mins\", \"distance_km\", \"elapsed_time_mins\", \"tss\", \"hrss\", \"elevation_gain_m\"     acute_period = 7,              # Duration (days) for acute load calculation     chronic_period = 28            # Duration (days) for chronic load calculation     # , start_date = NULL          # Optional: Start date (YYYY-MM-DD) for analysis (defaults to 1 year ago)     # , end_date = NULL            # Optional: End date (YYYY-MM-DD) for analysis (defaults to today)     # , user_ftp = NULL            # Optional: Required if load_metric = \"tss\"     # , user_max_hr = NULL         # Optional: Required if load_metric = \"hrss\"     # , user_resting_hr = NULL     # Optional: Required if load_metric = \"hrss\"     # , smoothing_period = 7       # Optional: Days for smoothing the ACWR line (defaults to 7)     # , highlight_zones = TRUE     # Optional: Show background risk zone shading (defaults to TRUE) )  # Alternatively, plot pre-calculated data: # plot_acwr(acwr_df = acwr_data)"},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"id_3-efficiency-factor-trend","dir":"","previous_headings":"","what":"3. Efficiency Factor Trend","title":"Advanced Sports Performance Analysis for Strava Data","text":"Efficiency Factor (EF) common metric assessing aerobic fitness adaptations. Ideally, EF trend upwards fitness improves, indicating higher output physiological cost. analysis helps track long-term aerobic efficiency progress may signal accumulating fatigue fluctuations form. Calculating Data: get underlying EF data (date, activity_type, ef_value) data frame: Plotting:","code":"# Ensure stoken is valid ef_data <- calculate_ef(     stoken = stoken,     activity_type = c(\"Run\", \"Ride\"), # Example: Runs and Rides     ef_metric = \"Pace_HR\"             # Example: Pace/HR ) # print(tail(ef_data)) # Uncomment to view # Ensure stoken is valid plot_ef(     stoken = stoken,     activity_type = c(\"Run\", \"Ride\"), # Specify activity type(s)     ef_metric = \"Pace_HR\"             # Choose metric: \"Pace_HR\", \"Power_HR\"     # , start_date = NULL             # Optional     # , end_date = NULL               # Optional     # , min_duration_mins = 20        # Optional     # , add_trend_line = TRUE         # Optional     # , smoothing_method = \"loess\"    # Optional )  # Alternatively, plot pre-calculated data: # plot_ef(ef_df = ef_data)"},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"id_4-long-term-performance-metrics-tracking-personal-bests---pbs","dir":"","previous_headings":"","what":"4. Long-Term Performance Metrics Tracking (Personal Bests - PBs)","title":"Advanced Sports Performance Analysis for Strava Data","text":"analysis allows visualize progression key performance benchmarks extended periods. Track metrics like estimated best times standard distances (e.g., 1k, 5k, 10k) critical power outputs. observing trends, including highlighted Personal Bests (PBs), can directly assess effectiveness different training blocks, validate fitness improvements beyond physiological markers, identify performance plateaus, stay motivated seeing concrete results align goals. Calculating Data: get underlying PB data (activity_id, activity_date, distance, time_seconds, cumulative_pb_seconds, is_pb, etc.) data frame: Plotting:","code":"# Ensure stoken is valid pb_data <- calculate_pbs(     stoken = stoken,     distance_meters = c(1000, 5000, 10000), # Example: 1k, 5k, 10k     activity_type = \"Run\"                   # Example: For Runs ) # print(tail(pb_data)) # Uncomment to view # Filter for actual new PBs # new_pbs <- pb_data[pb_data$is_pb, ] # print(new_pbs) # Ensure stoken is valid plot_pbs(     stoken = stoken,     distance_meters = c(1000, 5000, 10000), # Specify distances in meters (REQUIRED)     activity_type = \"Run\"                   # Specify activity type (currently only \"Run\" is fully supported)     # , max_activities = 100                  # Optional: Limit activities to check for speed/API limits     # , date_range = NULL                   # Optional )  # Alternatively, plot pre-calculated data: # plot_pbs(pbs_df = pb_data)"},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"id_5-decoupling-trend-pacepower-vs-hr","dir":"","previous_headings":"","what":"5. Decoupling Trend (Pace/Power vs HR)","title":"Advanced Sports Performance Analysis for Strava Data","text":"Note: analysis requires fetching detailed stream data activity (calculate_decoupling uses httr ) can slow hit API rate limits. Use max_activities parameter limit scope. Calculating Data: get underlying decoupling data (date, decoupling) data frame: Plotting:","code":"# Ensure stoken is valid.  decoupling_data <- calculate_decoupling(     stoken = stoken,     activity_type = \"Run\",     decouple_metric = \"Pace_HR\",     max_activities = 20 # Use a small number for example )  # Check the result (it might be NULL or stop with an error if issues occurred) # print(tail(decoupling_data)) # Ensure stoken is valid. # WARNING: Can be slow. Reduce max_activities for plotting.  plot_decoupling(     stoken = stoken,     activity_type = \"Run\",     decouple_metric = \"Pace_HR\",     max_activities = 20 # Use a small number for example ) # Alternatively, plot pre-calculated data (if 'decoupling_data' was successfully calculated earlier): # plot_decoupling(decoupling_df = decoupling_data)"},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"recent-updates","dir":"","previous_headings":"","what":"Recent Updates","title":"Advanced Sports Performance Analysis for Strava Data","text":"details recent changes version history, please see Changelog package website.","code":""},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"development-status--potential-issues","dir":"","previous_headings":"","what":"Development Status & Potential Issues","title":"Advanced Sports Performance Analysis for Strava Data","text":"Athlytics active development. core functionalities tested, variations Strava data availability unforeseen API interactions might occasionally lead warnings errors execution. appreciate bug reports contributions improve robustness!","code":""},{"path":"https://hzaCode.github.io/Athlytics/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Athlytics authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_acwr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ACWR Data — calculate_acwr","title":"Calculate ACWR Data — calculate_acwr","text":"Calculates Acute:Chronic Workload Ratio (ACWR) Strava data.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_acwr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ACWR Data — calculate_acwr","text":"","code":"calculate_acwr(   stoken,   activity_type = NULL,   load_metric = \"duration_mins\",   acute_period = 7,   chronic_period = 28,   start_date = NULL,   end_date = NULL,   user_ftp = NULL,   user_max_hr = NULL,   user_resting_hr = NULL,   smoothing_period = 7 )"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_acwr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ACWR Data — calculate_acwr","text":"stoken valid Strava token `rStrava::strava_oauth()`. activity_type Optional. Filter activities type (e.g., \"Run\", \"Ride\"). Default `NULL` includes types. load_metric Method calculating daily load (e.g., \"duration_mins\", \"distance_km\", \"tss\", \"hrss\"). Default \"duration_mins\". acute_period Days acute load window (e.g., 7). chronic_period Days chronic load window (e.g., 28). Must greater `acute_period`. start_date Optional. Analysis start date (YYYY-MM-DD string Date). Defaults one year ago. end_date Optional. Analysis end date (YYYY-MM-DD string Date). Defaults today. user_ftp Required `load_metric = \"tss\"`. Functional Threshold Power. user_max_hr Required `load_metric = \"hrss\"`. maximum heart rate. user_resting_hr Required `load_metric = \"hrss\"`. resting heart rate. smoothing_period Days smoothing ACWR using rolling mean (e.g., 7). Default 7.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_acwr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ACWR Data — calculate_acwr","text":"data frame columns: `date`, `atl` (Acute Load), `ctl` (Chronic Load), `acwr` (raw ACWR), `acwr_smooth` (smoothed ACWR) specified date range.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_acwr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate ACWR Data — calculate_acwr","text":"Calculates daily load, ATL, CTL, raw ACWR, smoothed ACWR Strava activities. Provides data `plot_acwr`. Fetches extra prior data accurate   initial CTL. Fetching can slow long periods.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_acwr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate ACWR Data — calculate_acwr","text":"","code":"# 使用模拟数据示例 (注意: 模拟数据本身已是计算结果, 此处仅作演示) data(Athlytics_sample_data) if (!is.null(athlytics_sample_acwr)) {   print(head(athlytics_sample_acwr)) } #> # A tibble: 6 × 5 #>   date         atl   ctl  acwr acwr_smooth #>   <date>     <dbl> <dbl> <dbl>       <dbl> #> 1 2024-05-07  15.8  9.90  1.60          NA #> 2 2024-05-08  15.8  9.90  1.60          NA #> 3 2024-05-09  18.7  9.76  1.92          NA #> 4 2024-05-10  14.0  9.76  1.44          NA #> 5 2024-05-11  14.0  9.76  1.44          NA #> 6 2024-05-12  11.9  9.76  1.22          NA  # \\donttest{ # 使用真实数据的示例（需要认证） stoken <- rStrava::strava_oauth(..., cache = TRUE) #> Error: '...' used in an incorrect context  # 计算跑步的ACWR (使用运动时长) run_acwr <- calculate_acwr(stoken = stoken, activity_type = \"Run\",                            load_metric = \"duration_mins\") #> Error: object 'stoken' not found print(tail(run_acwr)) #> Error: object 'run_acwr' not found  # 计算骑行的ACWR (使用TSS, 需要FTP) ride_acwr_tss <- calculate_acwr(stoken = stoken, activity_type = \"Ride\",                                 load_metric = \"tss\", user_ftp = 280) #> Error: object 'stoken' not found print(tail(ride_acwr_tss)) #> Error: object 'ride_acwr_tss' not found # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_decoupling.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Aerobic Decoupling — calculate_decoupling","title":"Calculate Aerobic Decoupling — calculate_decoupling","text":"Calculates aerobic decoupling Strava activities.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_decoupling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Aerobic Decoupling — calculate_decoupling","text":"","code":"calculate_decoupling(   stoken,   activity_type = c(\"Run\", \"Ride\"),   decouple_metric = c(\"Pace_HR\", \"Power_HR\"),   start_date = NULL,   end_date = NULL,   min_duration_mins = 45,   max_activities = 50,   stream_df = NULL )"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_decoupling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Aerobic Decoupling — calculate_decoupling","text":"stoken valid Strava token `rStrava::strava_oauth()`. activity_type Type(s) activities analyze (e.g., \"Run\", \"Ride\"). decouple_metric Basis calculation: \"Pace_HR\" \"Power_HR\". start_date Optional. Analysis start date (YYYY-MM-DD string Date). Defaults one year ago. end_date Optional. Analysis end date (YYYY-MM-DD string Date). Defaults today. min_duration_mins Minimum activity duration (minutes) include. Default 45. max_activities Maximum number recent activities analyze. Default 50. stream_df Optional. pre-fetched data frame *single* activity's stream. provided, calculates decoupling data directly, ignoring `stoken` fetching parameters. Must include columns: `time`, `heartrate`, either `velocity_smooth`/`distance` (Pace_HR) `watts` (Power_HR).","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_decoupling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Aerobic Decoupling — calculate_decoupling","text":"Returns data frame `date` `decoupling` [   single numeric decoupling value `stream_df` provided.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_decoupling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Aerobic Decoupling — calculate_decoupling","text":"Calculates aerobic decoupling (HR drift relative pace/power) using detailed Strava activity streams. Fetching streams via API can slow. Provides data `plot_decoupling`. Compares output/HR efficiency   first second halves activities. Positive values indicate   HR drift. Fetching streams via API using `httr` slow subject rate limits.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_decoupling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Aerobic Decoupling — calculate_decoupling","text":"","code":"# 使用模拟数据示例 (注意: 模拟数据本身已是计算结果, 此处仅作演示) data(Athlytics_sample_data) if (!is.null(athlytics_sample_decoupling)) {   print(head(athlytics_sample_decoupling)) } #> # A tibble: 6 × 2 #>   date       decoupling #>   <date>          <dbl> #> 1 2024-11-28       4.62 #> 2 2024-12-14       4.89 #> 3 2024-12-21     -30.0  #> 4 2025-01-11     -14.8  #> 5 2025-01-11       7.19 #> 6 2025-01-18       3.39  # \\donttest{ # 使用真实数据的示例（需要认证） stoken <- rStrava::strava_oauth(..., cache = TRUE) #> Error: '...' used in an incorrect context  # 计算最近跑步的Pace/HR解耦 (限制为10次活动以提高速度) run_decoupling <- calculate_decoupling(     stoken = stoken,     activity_type = \"Run\",     decouple_metric = \"Pace_HR\",     max_activities = 10 ) #> Error: object 'stoken' not found print(tail(run_decoupling)) #> Error: object 'run_decoupling' not found # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_ef.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Efficiency Factor (EF) Data — calculate_ef","title":"Calculate Efficiency Factor (EF) Data — calculate_ef","text":"Calculates Efficiency Factor (Pace/HR Power/HR) Strava activities.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_ef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Efficiency Factor (EF) Data — calculate_ef","text":"","code":"calculate_ef(   stoken,   activity_type = c(\"Run\", \"Ride\"),   ef_metric = c(\"Pace_HR\", \"Power_HR\"),   start_date = NULL,   end_date = NULL,   min_duration_mins = 20 )"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_ef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Efficiency Factor (EF) Data — calculate_ef","text":"stoken valid Strava token object obtained using rStrava::strava_oauth(). activity_type Character vector single string specifying activity type(s). ef_metric Character string specifying EF metric (\"Pace_HR\" \"Power_HR\"). start_date Optional start date (YYYY-MM-DD string Date object). Defaults one year ago. end_date Optional end date (YYYY-MM-DD string Date object). Defaults today. min_duration_mins Numeric, minimum activity duration minutes. Default 20.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_ef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Efficiency Factor (EF) Data — calculate_ef","text":"data frame columns: date, activity_type, ef_value.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_ef.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Efficiency Factor (EF) Data — calculate_ef","text":"Fetches activity summaries calculates EF (output/HR) . Provides data used `plot_ef`.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_ef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Efficiency Factor (EF) Data — calculate_ef","text":"","code":"# 使用模拟数据示例 (注意: 模拟数据本身已是计算结果, 此处仅作演示) data(Athlytics_sample_data) if (!is.null(athlytics_sample_ef)) {   print(head(athlytics_sample_ef)) } #>         date activity_type   ef_value #> 1 2025-03-19           Run 0.01681271 #> 2 2025-03-15           Run 0.01879990 #> 3 2025-03-09           Run 0.01951791 #> 4 2025-02-27           Run 0.02125833 #> 5 2025-02-21           Run 0.02178707 #> 6 2025-02-20           Run 0.01802687  # \\donttest{ # 使用真实数据的示例（需要认证） stoken <- rStrava::strava_oauth(..., cache = TRUE) #> Error: '...' used in an incorrect context  # 计算跑步的Pace/HR效率因子 ef_data_run <- calculate_ef(stoken = stoken, activity_type = \"Run\", ef_metric = \"Pace_HR\") #> Error: object 'stoken' not found print(tail(ef_data_run)) #> Error: object 'ef_data_run' not found  # 计算骑行的Power/HR效率因子 ef_data_ride <- calculate_ef(stoken = stoken, activity_type = \"Ride\", ef_metric = \"Power_HR\") #> Error: object 'stoken' not found print(tail(ef_data_ride)) #> Error: object 'ef_data_ride' not found # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_exposure.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Training Load Exposure (ATL, CTL, ACWR) — calculate_exposure","title":"Calculate Training Load Exposure (ATL, CTL, ACWR) — calculate_exposure","text":"Calculates training load metrics like ATL, CTL, ACWR Strava data.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_exposure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Training Load Exposure (ATL, CTL, ACWR) — calculate_exposure","text":"","code":"calculate_exposure(   stoken,   activity_type = c(\"Run\", \"Ride\", \"VirtualRide\", \"VirtualRun\"),   load_metric = \"duration_mins\",   acute_period = 7,   chronic_period = 42,   user_ftp = NULL,   user_max_hr = NULL,   user_resting_hr = NULL,   end_date = NULL )"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_exposure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Training Load Exposure (ATL, CTL, ACWR) — calculate_exposure","text":"stoken valid Strava token `rStrava::strava_oauth()`. activity_type Type(s) activities include (e.g., \"Run\", \"Ride\"). Default includes common run/ride types. load_metric Method calculating daily load (e.g., \"duration_mins\", \"distance_km\", \"tss\", \"hrss\"). Default \"duration_mins\". acute_period Days acute load window (e.g., 7). chronic_period Days chronic load window (e.g., 42). Must greater `acute_period`. user_ftp Required `load_metric = \"tss\"`. Functional Threshold Power. user_max_hr Required `load_metric = \"hrss\"`. maximum heart rate. user_resting_hr Required `load_metric = \"hrss\"`. resting heart rate. end_date Optional. Analysis end date (YYYY-MM-DD string Date). Defaults today. analysis period covers `chronic_period` days ending date.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_exposure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Training Load Exposure (ATL, CTL, ACWR) — calculate_exposure","text":"data frame columns: `date`, `daily_load`, `atl` (Acute Load),   `ctl` (Chronic Load), `acwr` (Acute:Chronic Ratio) analysis period.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_exposure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Training Load Exposure (ATL, CTL, ACWR) — calculate_exposure","text":"Calculates daily load, ATL, CTL, ACWR Strava activities based chosen metric periods. Provides data `plot_exposure`. Fetches extra prior data   accurate initial CTL. Requires FTP/HR parameters TSS/HRSS metrics.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_exposure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Training Load Exposure (ATL, CTL, ACWR) — calculate_exposure","text":"","code":"# 使用模拟数据示例 (注意: 模拟数据本身已是计算结果, 此处仅作演示) data(Athlytics_sample_data) if (!is.null(athlytics_sample_exposure)) {   print(head(athlytics_sample_exposure)) } #> # A tibble: 6 × 5 #>   date       daily_load   ctl   atl  acwr #>   <date>          <dbl> <dbl> <dbl> <dbl> #> 1 2025-03-27          0  5.98     0     0 #> 2 2025-03-28          0  5.98     0     0 #> 3 2025-03-29          0  5.44     0     0 #> 4 2025-03-30          0  5.44     0     0 #> 5 2025-03-31          0  5.44     0     0 #> 6 2025-04-01          0  5.44     0     0  # \\donttest{ # 使用真实数据的示例（需要认证） stoken <- rStrava::strava_oauth(..., cache = TRUE) #> Error: '...' used in an incorrect context  # 使用TSS计算骑行的训练负荷 ride_exposure_tss <- calculate_exposure(     stoken = stoken,     activity_type = \"Ride\",     load_metric = \"tss\",     user_ftp = 280,     acute_period = 7,     chronic_period = 28 ) #> Error: object 'stoken' not found print(head(ride_exposure_tss)) #> Error: object 'ride_exposure_tss' not found  # 使用HRSS计算跑步的训练负荷 run_exposure_hrss <- calculate_exposure(     stoken = stoken,     activity_type = \"Run\",     load_metric = \"hrss\",     user_max_hr = 190,     user_resting_hr = 50 ) #> Error: object 'stoken' not found print(tail(run_exposure_hrss)) #> Error: object 'run_exposure_hrss' not found # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_pbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Personal Bests (PBs) — calculate_pbs","title":"Calculate Personal Bests (PBs) — calculate_pbs","text":"Finds personal best times specified distances Strava activities.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_pbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Personal Bests (PBs) — calculate_pbs","text":"","code":"calculate_pbs(   stoken,   activity_type = \"Run\",   distance_meters,   max_activities = 500,   date_range = NULL )"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_pbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Personal Bests (PBs) — calculate_pbs","text":"stoken valid Strava token `rStrava::strava_oauth()`. activity_type Type(s) activities search PBs (e.g., \"Run\"). Note: Current logic relies Strava's `best_efforts`, primarily available Runs. distance_meters Numeric vector distances (meters) find PBs (e.g., `c(1000, 5000, 10000)`). max_activities Maximum number recent activities check. Default 500. Reducing can speed process help avoid API rate limits. date_range Optional. Filter activities within date range `c(\"YYYY-MM-DD\", \"YYYY-MM-DD\")`.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_pbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Personal Bests (PBs) — calculate_pbs","text":"data frame containing found best efforts specified distances.   Includes columns: `activity_id`, `activity_date`, `distance`, `time_seconds` (elapsed time),   `cumulative_pb_seconds` (PB distance date), `is_pb` (TRUE effort set new PB),   `distance_label` (e.g., \"5k\"), `time_period` (formatted time).","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_pbs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Personal Bests (PBs) — calculate_pbs","text":"Fetches detailed activity data, extracts Strava's 'best efforts', calculates cumulative PBs specified distances. Provides data `plot_pbs`. Processes activities chronologically.   Fetching detailed data slow due API limits (includes 1s delay per activity).","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_pbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Personal Bests (PBs) — calculate_pbs","text":"","code":"# 使用模拟数据示例 (注意: 模拟数据本身已是计算结果, 此处仅作演示) data(Athlytics_sample_data) if (!is.null(athlytics_sample_pbs)) {   print(head(athlytics_sample_pbs)) } #> # A tibble: 6 × 10 #>   activity_id activity_date       distance elapsed_time moving_time time_seconds #>   <chr>       <dttm>                 <dbl>        <dbl>       <dbl>        <dbl> #> 1 12846473912 2022-01-11 20:46:47     1000          326         326          326 #> 2 12846473209 2022-01-12 20:51:44     1000          302         302          302 #> 3 12846472820 2022-01-13 22:24:56     1000          315         315          315 #> 4 6928788461  2022-02-04 21:40:44     1000          348         348          348 #> 5 6928788329  2022-02-04 21:55:42     1000          592         592          592 #> 6 6907736431  2022-02-12 11:47:36     1000          314         314          314 #> # ℹ 4 more variables: cumulative_pb_seconds <dbl>, is_pb <lgl>, #> #   distance_label <fct>, time_period <Period>  # \\donttest{ # 使用真实数据的示例（需要认证） stoken <- rStrava::strava_oauth(..., cache = TRUE) #> Error: '...' used in an incorrect context  # 计算1k, 5k, 10k的PB (限制活动数量以提高速度) pb_data <- calculate_pbs(stoken = stoken,                             distance_meters = c(1000, 5000, 10000),                            max_activities = 100) #> Error: object 'stoken' not found print(head(pb_data)) #> Error: object 'pb_data' not found  # 仅显示创造新PB的成绩 new_pbs <- pb_data[pb_data$is_pb, ] #> Error: object 'pb_data' not found print(new_pbs) #> Error: object 'new_pbs' not found # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/fetch_strava_activities.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Fetch and Compile Strava Activities — fetch_strava_activities","title":"(Internal) Fetch and Compile Strava Activities — fetch_strava_activities","text":"Helper function get Strava activity data within date range.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/fetch_strava_activities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Fetch and Compile Strava Activities — fetch_strava_activities","text":"","code":"fetch_strava_activities(   stoken,   start_date = NULL,   end_date = NULL,   fetch_details = FALSE,   required_cols = c(\"average_watts\", \"average_heartrate\"),   delay = 1 )"},{"path":"https://hzaCode.github.io/Athlytics/reference/fetch_strava_activities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Fetch and Compile Strava Activities — fetch_strava_activities","text":"stoken valid Strava token `rStrava::strava_oauth()`. start_date Optional. Start date (YYYY-MM-DD Date/POSIXct) fetching. Defaults ~2009. end_date Optional. End date (YYYY-MM-DD Date/POSIXct) fetching. Defaults now. fetch_details Fetch detailed data activity using `get_activity()`? Needed power/HR metrics much slower uses API calls. Default `FALSE`. required_cols `fetch_details = TRUE`, detailed columns attempt extract (e.g., `c(\"average_watts\", \"average_heartrate\")`). delay Seconds pause `get_activity` calls `fetch_details = TRUE` manage API rate limits. Default 1.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/fetch_strava_activities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Fetch and Compile Strava Activities — fetch_strava_activities","text":"tibble activity data. Columns vary based `fetch_details`.   Includes `date` column derived `start_date_local`.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/fetch_strava_activities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Fetch and Compile Strava Activities — fetch_strava_activities","text":"Retrieves summary list activities optionally fetches detailed data activity needed specific metrics (e.g., power). Intended internal use within package. function wraps `rStrava::get_activity_list`   `rStrava::compile_activities`. `fetch_details` enabled, iteratively   calls `rStrava::get_activity` activity, main performance   bottleneck API usage driver.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_acwr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ACWR Trend — plot_acwr","title":"Plot ACWR Trend — plot_acwr","text":"Visualizes Acute:Chronic Workload Ratio (ACWR) trend time.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_acwr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ACWR Trend — plot_acwr","text":"","code":"plot_acwr(   stoken,   activity_type = NULL,   load_metric = \"duration_mins\",   acute_period = 7,   chronic_period = 28,   start_date = NULL,   end_date = NULL,   user_ftp = NULL,   user_max_hr = NULL,   user_resting_hr = NULL,   smoothing_period = 7,   highlight_zones = TRUE,   acwr_df = NULL )"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_acwr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ACWR Trend — plot_acwr","text":"stoken valid Strava token `rStrava::strava_oauth()`. Required unless `acwr_df` provided. activity_type Type(s) activities analyze (e.g., \"Run\", \"Ride\"). load_metric Method calculating daily load (e.g., \"duration_mins\", \"distance_km\", \"tss\", \"hrss\"). acute_period Days acute load window (e.g., 7). chronic_period Days chronic load window (e.g., 28). Must greater `acute_period`. start_date Optional. Analysis start date (YYYY-MM-DD string Date). Defaults ~1 year ago. end_date Optional. Analysis end date (YYYY-MM-DD string Date). Defaults today. smoothing_period Days smoothing ACWR using rolling mean (e.g., 7). Default 7. acwr_df Optional. pre-calculated data frame `calculate_acwr`. provided, `stoken` calculation parameters ignored.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_acwr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ACWR Trend — plot_acwr","text":"ggplot object showing ACWR trend.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_acwr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot ACWR Trend — plot_acwr","text":"Plots ACWR trend time. Uses pre-calculated data calls `calculate_acwr` (can slow).   ACWR calculated acute load / chronic load. ratio 0.8-1.3 often considered \"sweet spot\".   `acwr_df` provided, calls `calculate_acwr` first (can slow hit API limits).","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_acwr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ACWR Trend — plot_acwr","text":"","code":"# 使用模拟数据示例 data(Athlytics_sample_data) if (!is.null(athlytics_sample_acwr)) {   p <- plot_acwr(acwr_df = athlytics_sample_acwr)   print(p) } #> Generating plot...   # \\donttest{ # 使用真实数据的示例（需要认证） stoken <- rStrava::strava_oauth(..., cache = TRUE) #> Error: '...' used in an incorrect context  # 绘制跑步的ACWR趋势（使用运动时长作为负荷指标） plot_acwr(stoken = stoken,           activity_type = \"Run\",           load_metric = \"duration_mins\",           acute_period = 7,           chronic_period = 28) #> Error: object 'stoken' not found  # 绘制骑行的ACWR趋势（使用TSS作为负荷指标） plot_acwr(stoken = stoken,           activity_type = \"Ride\",           load_metric = \"tss\",           user_ftp = 280)  # 需要提供FTP值 #> Error: object 'stoken' not found # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_decoupling.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Aerobic Decoupling Trend — plot_decoupling","title":"Plot Aerobic Decoupling Trend — plot_decoupling","text":"Visualizes trend aerobic decoupling time.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_decoupling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Aerobic Decoupling Trend — plot_decoupling","text":"","code":"plot_decoupling(   stoken,   activity_type = c(\"Run\", \"Ride\"),   decouple_metric = c(\"Pace_HR\", \"Power_HR\"),   start_date = NULL,   end_date = NULL,   min_duration_mins = 45,   max_activities = 50,   add_trend_line = TRUE,   smoothing_method = \"loess\",   decoupling_df = NULL )"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_decoupling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Aerobic Decoupling Trend — plot_decoupling","text":"stoken valid Strava token `rStrava::strava_oauth()`. Required unless `decoupling_df` provided. activity_type Type(s) activities analyze (e.g., \"Run\", \"Ride\"). decouple_metric Metric basis: \"Pace_HR\" \"Power_HR\". start_date Optional. Analysis start date (YYYY-MM-DD string Date). Defaults ~1 year ago. end_date Optional. Analysis end date (YYYY-MM-DD string Date). Defaults today. min_duration_mins Minimum activity duration (minutes) include. Default 45. max_activities Max number recent activities fetch/analyze. Default 50. add_trend_line Add smoothed trend line (`geom_smooth`)? Default `TRUE`. smoothing_method Smoothing method trend line (e.g., \"loess\", \"lm\"). Default \"loess\". decoupling_df Optional. pre-calculated data frame `calculate_decoupling`. provided, `stoken` calculation parameters ignored.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_decoupling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Aerobic Decoupling Trend — plot_decoupling","text":"ggplot object showing decoupling trend.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_decoupling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Aerobic Decoupling Trend — plot_decoupling","text":"Plots aerobic decoupling trend time. Uses pre-calculated data calls `calculate_decoupling` (can slow). Plots decoupling percentage ((EF_1st_half - EF_2nd_half) / EF_1st_half * 100).   Positive values mean HR drifted relative output. 5   used reference. `decoupling_df` provided, calls `calculate_decoupling` first   (can slow hit API limits).","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_decoupling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Aerobic Decoupling Trend — plot_decoupling","text":"","code":"# 使用模拟数据示例 data(Athlytics_sample_data) if (!is.null(athlytics_sample_decoupling)) {   p <- plot_decoupling(decoupling_df = athlytics_sample_decoupling)   print(p) } #> Generating plot... #> `geom_smooth()` using formula = 'y ~ x'   # \\donttest{ # 使用真实数据的示例（需要认证） stoken <- rStrava::strava_oauth(..., cache = TRUE) #> Error: '...' used in an incorrect context  # 绘制最近30次跑步的Pace/HR解耦趋势 plot_decoupling(stoken = stoken,                 activity_type = \"Run\",                 decouple_metric = \"Pace_HR\",                 max_activities = 30) #> Error: object 'stoken' not found  # 绘制最近骑行的Power/HR解耦趋势 plot_decoupling(stoken = stoken,                 activity_type = \"Ride\",                 decouple_metric = \"Power_HR\") #> Error: object 'stoken' not found # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_ef.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Efficiency Factor (EF) Trend — plot_ef","title":"Plot Efficiency Factor (EF) Trend — plot_ef","text":"Visualizes trend Efficiency Factor (EF) time.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_ef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Efficiency Factor (EF) Trend — plot_ef","text":"","code":"plot_ef(   stoken,   activity_type = c(\"Run\", \"Ride\"),   ef_metric = c(\"Pace_HR\", \"Power_HR\"),   start_date = NULL,   end_date = NULL,   min_duration_mins = 20,   add_trend_line = TRUE,   smoothing_method = \"loess\",   ef_df = NULL )"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_ef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Efficiency Factor (EF) Trend — plot_ef","text":"stoken valid Strava token `rStrava::strava_oauth()`. Required unless `ef_df` provided. activity_type Type(s) activities analyze (e.g., \"Run\", \"Ride\"). ef_metric Metric calculate: \"Pace_HR\" (Speed/HR) \"Power_HR\" (Power/HR). start_date Optional. Analysis start date (YYYY-MM-DD string Date). Defaults ~1 year ago. end_date Optional. Analysis end date (YYYY-MM-DD string Date). Defaults today. min_duration_mins Minimum activity duration (minutes) include. Default 20. add_trend_line Add smoothed trend line (`geom_smooth`)? Default `TRUE`. smoothing_method Smoothing method trend line (e.g., \"loess\", \"lm\"). Default \"loess\". ef_df Optional. pre-calculated data frame `calculate_ef`. provided, `stoken` calculation parameters ignored.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_ef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Efficiency Factor (EF) Trend — plot_ef","text":"ggplot object showing EF trend.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_ef.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Efficiency Factor (EF) Trend — plot_ef","text":"Plots Efficiency Factor (EF) trend time. Uses pre-calculated data calls `calculate_ef`. Plots EF (output/HR based activity averages). upward trend   often indicates improved aerobic fitness. Points colored activity type.   `ef_df` provided, calls `calculate_ef` first.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_ef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Efficiency Factor (EF) Trend — plot_ef","text":"","code":"# 使用模拟数据示例 data(Athlytics_sample_data) if (!is.null(athlytics_sample_ef)) {   p <- plot_ef(ef_df = athlytics_sample_ef)   print(p) } #> Generating plot... #> `geom_smooth()` using formula = 'y ~ x'   # \\donttest{ # 使用真实数据的示例（需要认证） stoken <- rStrava::strava_oauth(..., cache = TRUE) #> Error: '...' used in an incorrect context  # 绘制跑步的Pace/HR EF趋势 (最近6个月) plot_ef(stoken = stoken,         activity_type = \"Run\",         ef_metric = \"Pace_HR\",         start_date = Sys.Date() - months(6)) #> Error: object 'stoken' not found  # 绘制骑行的Power/HR EF趋势 plot_ef(stoken = stoken,         activity_type = \"Ride\",         ef_metric = \"Power_HR\") #> Error: object 'stoken' not found  # 绘制多种跑步类型的Pace/HR EF趋势 (无趋势线) plot_ef(stoken = stoken,         activity_type = c(\"Run\", \"VirtualRun\"),         ef_metric = \"Pace_HR\",         add_trend_line = FALSE) #> Error: object 'stoken' not found # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_exposure.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Training Load Exposure (ATL vs CTL) — plot_exposure","title":"Plot Training Load Exposure (ATL vs CTL) — plot_exposure","text":"Visualizes relationship Acute Chronic Training Load.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_exposure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Training Load Exposure (ATL vs CTL) — plot_exposure","text":"","code":"plot_exposure(   stoken,   activity_type = c(\"Run\", \"Ride\", \"VirtualRide\", \"VirtualRun\"),   load_metric = \"duration_mins\",   acute_period = 7,   chronic_period = 42,   user_ftp = NULL,   user_max_hr = NULL,   user_resting_hr = NULL,   end_date = NULL,   risk_zones = TRUE,   exposure_df = NULL )"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_exposure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Training Load Exposure (ATL vs CTL) — plot_exposure","text":"stoken valid Strava token `rStrava::strava_oauth()`. Required unless `exposure_df` provided. activity_type Type(s) activities include (e.g., \"Run\", \"Ride\"). Default uses common types. load_metric Method calculating daily load (e.g., \"duration_mins\", \"tss\", \"hrss\"). Default \"duration_mins\". See `calculate_exposure` details approximate TSS/HRSS calculations. acute_period Days acute load window (e.g., 7). chronic_period Days chronic load window (e.g., 42). Must > `acute_period`. user_ftp Required `load_metric = \"tss\"`. FTP. user_max_hr Required `load_metric = \"hrss\"`. max HR. user_resting_hr Required `load_metric = \"hrss\"`. resting HR. end_date Optional. Analysis end date (YYYY-MM-DD string Date). Defaults today. risk_zones Add background shading typical ACWR risk zones? Default `TRUE`. exposure_df Optional. pre-calculated data frame `calculate_exposure`. provided, `stoken` calculation parameters ignored. Must contain `date`, `atl`, `ctl` (`acwr` `risk_zones = TRUE`).","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_exposure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Training Load Exposure (ATL vs CTL) — plot_exposure","text":"ggplot object showing ATL vs CTL.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_exposure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Training Load Exposure (ATL vs CTL) — plot_exposure","text":"Plots ATL vs CTL, optionally showing risk zones based ACWR. Uses pre-calculated data calls `calculate_exposure`. Visualizes training state plotting ATL vs CTL (related PMC charts).   Points colored date, latest point highlighted (red triangle).   Optional risk zones (based ACWR thresholds ~0.8, 1.3, 1.5) can shaded.   `exposure_df` provided, calls `calculate_exposure` first.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_exposure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Training Load Exposure (ATL vs CTL) — plot_exposure","text":"","code":"# 使用模拟数据示例 data(Athlytics_sample_data) if (!is.null(athlytics_sample_exposure)) {   p <- plot_exposure(exposure_df = athlytics_sample_exposure)   print(p) } #> Generating plot...   # \\donttest{ # 使用真实数据的示例（需要认证） stoken <- rStrava::strava_oauth(..., cache = TRUE) #> Error: '...' used in an incorrect context  # 绘制默认活动的exposure图 (使用运动时长) plot_exposure(stoken = stoken) #> Error: object 'stoken' not found  # 绘制骑行的exposure图 (使用TSS, 7/28天周期) plot_exposure(stoken = stoken, activity_type = \"Ride\", load_metric = \"tss\",               user_ftp = 280, acute_period = 7, chronic_period = 28) #> Error: object 'stoken' not found  # 绘制跑步的exposure图 (使用HRSS) plot_exposure(stoken = stoken, activity_type = \"Run\", load_metric = \"hrss\",               user_max_hr = 190, user_resting_hr = 50) #> Error: object 'stoken' not found # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_pbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Personal Best (PB) Trends — plot_pbs","title":"Plot Personal Best (PB) Trends — plot_pbs","text":"Visualizes trend personal best times specific running distances.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_pbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Personal Best (PB) Trends — plot_pbs","text":"","code":"plot_pbs(   stoken,   activity_type = \"Run\",   distance_meters,   max_activities = 500,   date_range = NULL,   pbs_df = NULL )"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_pbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Personal Best (PB) Trends — plot_pbs","text":"stoken valid Strava token `rStrava::strava_oauth()`. Required unless `pbs_df` provided. activity_type Type(s) activities search (e.g., \"Run\"). Default \"Run\". distance_meters Numeric vector distances (meters) plot PBs (e.g., `c(1000, 5000)`). Relies Strava's `best_efforts` data. max_activities Max number recent activities check. Default 500. Reduce speed. date_range Optional. Filter activities date `c(\"YYYY-MM-DD\", \"YYYY-MM-DD\")`. pbs_df Optional. pre-calculated data frame `calculate_pbs`. provided, `stoken` calculation parameters ignored.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_pbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Personal Best (PB) Trends — plot_pbs","text":"ggplot object showing PB trends, faceted distance multiple plotted.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_pbs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Personal Best (PB) Trends — plot_pbs","text":"Plots trend best efforts specified distances, highlighting new PBs. Uses pre-calculated data calls `calculate_pbs`. Visualizes data `calculate_pbs`. Points show best efforts;   solid points mark new PBs. Y-axis MM:SS.   `pbs_df` provided, calls `calculate_pbs` first (can slow).","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_pbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Personal Best (PB) Trends — plot_pbs","text":"","code":"# 使用模拟数据示例 data(Athlytics_sample_data) if (!is.null(athlytics_sample_pbs)) {   p <- plot_pbs(pbs_df = athlytics_sample_pbs)   print(p) } #> Generating plot... #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic?   # \\donttest{ # 使用真实数据的示例（需要认证） stoken <- rStrava::strava_oauth(..., cache = TRUE) #> Error: '...' used in an incorrect context  # 绘制1k, 5k, 10k的PBs图 plot_pbs(stoken = stoken, distance_meters = c(1000, 5000, 10000)) #> Error: object 'stoken' not found  # 绘制2023年1英里和半程马拉松的PBs图 plot_pbs(stoken = stoken,          distance_meters = c(1609, 21097),          date_range = c(\"2023-01-01\", \"2023-12-31\")) #> Error: object 'stoken' not found # }"},{"path":[]},{"path":"https://hzaCode.github.io/Athlytics/news/index.html","id":"major-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"Athlytics 0.1.0","text":"Decoupling Calculation: Switched rStrava::get_activity_streams direct Strava API calls using httr jsonlite fetching activity streams calculate_decoupling. aims resolve previous errors might impact performance rate limiting.","code":""},{"path":"https://hzaCode.github.io/Athlytics/news/index.html","id":"bug-fixes--improvements-0-1-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes & Improvements","title":"Athlytics 0.1.0","text":"Fixed calculate_acwr error (condition length > 1) forcing evaluation dplyr pipe. Corrected plot_pbs usage examples test scripts include required distance_meters argument. Added missing dependencies (httr, jsonlite) DESCRIPTION file. Improved error handling messages several functions. Simplified Roxygen documentation core functions. Updated README examples descriptions clarity consistency code.","code":""},{"path":"https://hzaCode.github.io/Athlytics/news/index.html","id":"previous-notes-initial-release-0-1-0","dir":"Changelog","previous_headings":"","what":"Previous Notes (Initial Release)","title":"Athlytics 0.1.0","text":"Initial release. Load Exposure (Acute vs. Chronic Load) ACWR Trend Efficiency Factor Trend Personal Bests (PBs) Decoupling Trend Added Strava authentication helper based rStrava.","code":""}]
