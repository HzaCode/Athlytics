[{"path":"https://hzaCode.github.io/Athlytics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ang. Author, maintainer.","code":""},{"path":"https://hzaCode.github.io/Athlytics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ang (2025). Athlytics: Advanced Sports Performance Analysis 'Strava' Data. R package version 0.1.0, https://github.com/HzaCode/Athlytics.","code":"@Manual{,   title = {Athlytics: Advanced Sports Performance Analysis for 'Strava' Data},   author = {{Ang}},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/HzaCode/Athlytics}, }"},{"path":[]},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Advanced Sports Performance Analysis for Strava Data","text":"development repository Athlytics, R package designed simplify analysis athletic performance training load data sourced directly Strava API. package provides functions fetching Strava data, calculating key metrics, generating insightful visualizations training monitoring.","code":""},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Advanced Sports Performance Analysis for Strava Data","text":"can install released version Athlytics CRAN (available) : Alternatively, development version repository can installed follows: also need install rStrava don’t already:","code":"install.packages(\"Athlytics\") # install.packages('remotes') remotes::install_github('HzaCode/Athlytics') install.packages(\"rStrava\")"},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"using-athlytics-functions","dir":"","previous_headings":"","what":"Using Athlytics Functions","title":"Advanced Sports Performance Analysis for Strava Data","text":"","code":"library(Athlytics)"},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"authentication-with-strava-using-rstrava","dir":"","previous_headings":"","what":"Authentication with Strava (using rStrava)","title":"Advanced Sports Performance Analysis for Strava Data","text":"Athlytics requires authenticate Strava using rStrava package. generates token pass Athlytics functions. Go https://www.strava.com/settings/api. Create new API application (e.g., “Athlytics Analysis”). Set “Authorization Callback Domain” localhost. Note Client ID Client Secret. function handles OAuth2.0 flow, potentially opening browser window authorization. returns Token2.0 object needed Athlytics. Use cache = TRUE (default) store token securely (.httr-oauth), avoiding re-authentication later sessions.","code":"library(Athlytics) library(rStrava)   # Sys.setenv(STRAVA_CLIENT_ID = \"YOUR_CLIENT_ID\") # Sys.setenv(STRAVA_CLIENT_SECRET = \"YOUR_SECRET\")  # --- Authentication Step --- app_name <- 'MyAthlyticsApp' # Choose a name client_id <- Sys.getenv(\"STRAVA_CLIENT_ID\") client_secret <- Sys.getenv(\"STRAVA_CLIENT_SECRET\")  # Authenticate using rStrava and STORE the token object # Make sure app_scope allows reading activities. stoken <- rStrava::strava_oauth(app_name,                                 client_id = client_id,                                 client_secret = client_secret,                                 app_scope = \"activity:read_all\", # Or specific scope needed                                 cache = TRUE) # IMPORTANT for reusing the token"},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"optional-parameters-for-specific-metrics","dir":"","previous_headings":"","what":"Optional Parameters for Specific Metrics","title":"Advanced Sports Performance Analysis for Strava Data","text":"functions rely data directly available Strava (like duration, distance, heart rate), advanced calculations metrics may require additional user-specific information. user_ftp (Numeric): Functional Threshold Power (Watts). Needed calculating TSS (approximate) power zones cycling/running power. user_max_hr (Numeric): maximum heart rate. Needed calculating HRSS (approximate). user_resting_hr (Numeric): resting heart rate. Also needed calculating HRSS (approximate). (Provide parameters directly Athlytics function call chosen load_metric analysis requires . Check function documentation details.)","code":""},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"key-analysis-visualizations","dir":"","previous_headings":"","what":"Key Analysis Visualizations","title":"Advanced Sports Performance Analysis for Strava Data","text":"functions generate plots analyze trends performance, using data fetched processed Strava via stoken provide. Important Note API Usage Performance: functions, particularly calculate_pbs calculate_decoupling, need fetch detailed data (best efforts, streams) multiple activities. can slow may hit Strava API rate limits (leading errors) analyze large number activities. Consider using max_activities parameter functions analyzing shorter date ranges encounter issues.","code":""},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"id_1-load-exposure","dir":"","previous_headings":"","what":"1. Load Exposure","title":"Advanced Sports Performance Analysis for Strava Data","text":"analysis provides intuitive way assess current training load status potential injury risk level plotting acute vs. chronic load. can clearly see load combination falls within defined risk zones (like sweet spot, caution zone, danger zone). Note: using TSS HRSS load_metric, calculation approximation based average power average heart rate available Strava activity summary, detailed stream data (much slower process). Calculating Data: get underlying data (date, daily_load, atl, ctl, acwr) data frame without plotting: Plotting:","code":"# Ensure stoken is a valid token object from rStrava::strava_oauth() # Ensure user_ftp = 280 is appropriate for the user exposure_data <- calculate_exposure(     stoken = stoken,     activity_type = \"Ride\", # Example: Target Rides     load_metric = \"tss\",    # Example: Use approximate TSS based on average power     user_ftp = 280,         # REQUIRED for TSS     acute_period = 7,     chronic_period = 28 ) # print(tail(exposure_data)) # Uncomment to view # Example using approximated TSS based on avg power for Rides # Ensure stoken is valid and user_ftp = 280 is correct plot_exposure(     stoken = stoken,     activity_type = \"Ride\",        # Specify activity type(s)     load_metric = \"tss\",           # Use approximate TSS     user_ftp = 280,                # REQUIRED for TSS     acute_period = 7,              # Duration (days) for acute load calculation     chronic_period = 28            # Duration (days) for chronic load calculation     # , end_date = Sys.Date()      # Optional     # , risk_zones = TRUE          # Optional )  # Example using approximate HRSS based on avg heart rate for Runs # Ensure stoken is valid and HR parameters are correct plot_exposure(     stoken = stoken,     activity_type = \"Run\",         # Specify activity type(s)     load_metric = \"hrss\",          # Use approximate HRSS     user_max_hr = 190,             # REQUIRED for HRSS     user_resting_hr = 50,          # REQUIRED for HRSS     acute_period = 7,              # Duration (days) for acute load calculation     chronic_period = 42            # Example: Longer chronic window     # , end_date = Sys.Date()      # Optional     # , risk_zones = TRUE          # Optional )"},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"id_2-acwr-trend","dir":"","previous_headings":"","what":"2. ACWR Trend","title":"Advanced Sports Performance Analysis for Strava Data","text":"analysis, can monitor rate change training load time, helping identify periods rapid increases might lead overtraining heightened injury risk. ’s valuable tool periodized training monitoring risk management. Calculating Data: get underlying ACWR data (date, acwr, acwr_smooth) data frame: Plotting:","code":"# Ensure stoken is valid acwr_data <- calculate_acwr(     stoken = stoken,     activity_type = \"Run\",     load_metric = \"duration_mins\",     acute_period = 7,      chronic_period = 28 ) # print(tail(acwr_data)) # Uncomment to view # Ensure stoken is valid plot_acwr(     stoken = stoken,     activity_type = \"Run\",         # Specify activity type(s), e.g., \"Run\", \"Ride\", NULL for all     load_metric = \"duration_mins\", # Choose metric: \"duration_mins\", \"distance_km\", \"elapsed_time_mins\", \"tss\", \"hrss\", \"elevation_gain_m\"     acute_period = 7,              # Duration (days) for acute load calculation     chronic_period = 28            # Duration (days) for chronic load calculation     # , start_date = NULL          # Optional: Start date (YYYY-MM-DD) for analysis (defaults to 1 year ago)     # , end_date = NULL            # Optional: End date (YYYY-MM-DD) for analysis (defaults to today)     # , user_ftp = NULL            # Optional: Required if load_metric = \"tss\"     # , user_max_hr = NULL         # Optional: Required if load_metric = \"hrss\"     # , user_resting_hr = NULL     # Optional: Required if load_metric = \"hrss\"     # , smoothing_period = 7       # Optional: Days for smoothing the ACWR line (defaults to 7)     # , highlight_zones = TRUE     # Optional: Show background risk zone shading (defaults to TRUE) )"},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"id_3-efficiency-factor-trend","dir":"","previous_headings":"","what":"3. Efficiency Factor Trend","title":"Advanced Sports Performance Analysis for Strava Data","text":"Efficiency Factor (EF) common metric assessing aerobic fitness adaptations. Ideally, EF trend upwards fitness improves, indicating higher output physiological cost. analysis helps track long-term aerobic efficiency progress may signal accumulating fatigue fluctuations form. Calculating Data: get underlying EF data (date, activity_type, ef_value) data frame: Plotting:","code":"# Ensure stoken is valid ef_data <- calculate_ef(     stoken = stoken,     activity_type = c(\"Run\", \"Ride\"), # Example: Runs and Rides     ef_metric = \"Pace_HR\"             # Example: Pace/HR ) # print(tail(ef_data)) # Uncomment to view # Ensure stoken is valid plot_ef(     stoken = stoken,     activity_type = c(\"Run\", \"Ride\"), # Specify activity type(s)     ef_metric = \"Pace_HR\"             # Choose metric: \"Pace_HR\", \"Power_HR\"     # , start_date = NULL             # Optional     # , end_date = NULL               # Optional     # , min_duration_mins = 20        # Optional     # , add_trend_line = TRUE         # Optional     # , smoothing_method = \"loess\"    # Optional )"},{"path":"https://hzaCode.github.io/Athlytics/index.html","id":"id_4-long-term-performance-metrics-tracking-personal-bests---pbs","dir":"","previous_headings":"","what":"4. Long-Term Performance Metrics Tracking (Personal Bests - PBs)","title":"Advanced Sports Performance Analysis for Strava Data","text":"analysis allows visualize progression key performance benchmarks extended periods. Track metrics like estimated best times standard distances (e.g., 1k, 5k, 10k) critical power outputs. observing trends, including highlighted Personal Bests (PBs), can directly assess effectiveness different training blocks, validate fitness improvements beyond physiological markers, identify performance plateaus, stay motivated seeing concrete results align goals. Calculating Data: get underlying PB data (activity_id, activity_date, distance, time_seconds, cumulative_pb_seconds, is_pb, etc.) data frame: Plotting: ### 5. Decoupling Trend (Pace/Power vs HR) Note: analysis requires fetching detailed stream data activity can slow hit API rate limits. Use max_activities parameter limit scope. Calculating Data: get underlying decoupling data (date, decoupling) data frame: Plotting:  Note: Features actively developed may change.","code":"# Ensure stoken is valid pb_data <- calculate_pbs(     stoken = stoken,     distance_meters = c(1000, 5000, 10000), # Example: 1k, 5k, 10k     activity_type = \"Run\"                   # Example: For Runs ) # print(tail(pb_data)) # Uncomment to view # Filter for actual new PBs # new_pbs <- pb_data[pb_data$is_pb, ] # print(new_pbs) # Ensure stoken is valid plot_pbs(     stoken = stoken,     distance_meters = c(1000, 5000, 10000), # Specify distances in meters (REQUIRED)     activity_type = \"Run\",                   # Specify activity type (currently only \"Run\" is fully supported)     max_activities = 100                    # Optional: Limit activities to check for speed/API limits     # , date_range = NULL                   # Optional ) # Ensure stoken is valid. # WARNING: Can be slow. Reduce max_activities for testing. decoupling_data <- calculate_decoupling(     stoken = stoken,     activity_type = \"Run\",     decouple_metric = \"Pace_HR\",     max_activities = 20 # Use a small number for example ) # print(tail(decoupling_data)) # Uncomment to view # Ensure stoken is valid. # WARNING: Can be slow. Reduce max_activities for plotting. plot_decoupling(     stoken = stoken,     activity_type = \"Run\",     decouple_metric = \"Pace_HR\",     max_activities = 20 # Use a small number for example     # , start_date = NULL     # , end_date = NULL     # , min_duration_mins = 45     # , add_trend_line = TRUE     # , smoothing_method = \"loess\" )"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_acwr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ACWR Data — calculate_acwr","title":"Calculate ACWR Data — calculate_acwr","text":"Calculates Acute:Chronic Workload Ratio (ACWR) Strava data.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_acwr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ACWR Data — calculate_acwr","text":"","code":"calculate_acwr(   stoken,   activity_type = NULL,   load_metric = \"duration_mins\",   acute_period = 7,   chronic_period = 28,   start_date = NULL,   end_date = NULL,   user_ftp = NULL,   user_max_hr = NULL,   user_resting_hr = NULL,   smoothing_period = 7 )"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_acwr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ACWR Data — calculate_acwr","text":"stoken valid Strava token `rStrava::strava_oauth()`. activity_type Optional. Filter activities type (e.g., \"Run\", \"Ride\"). Default `NULL` includes types. load_metric Method calculating daily load (e.g., \"duration_mins\", \"distance_km\", \"tss\", \"hrss\"). Default \"duration_mins\". acute_period Days acute load window (e.g., 7). chronic_period Days chronic load window (e.g., 28). Must greater `acute_period`. start_date Optional. Analysis start date (YYYY-MM-DD string Date). Defaults one year ago. end_date Optional. Analysis end date (YYYY-MM-DD string Date). Defaults today. user_ftp Required `load_metric = \"tss\"`. Functional Threshold Power. user_max_hr Required `load_metric = \"hrss\"`. maximum heart rate. user_resting_hr Required `load_metric = \"hrss\"`. resting heart rate. smoothing_period Days smoothing ACWR using rolling mean (e.g., 7). Default 7.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_acwr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ACWR Data — calculate_acwr","text":"data frame columns: `date`, `acwr` (raw ACWR), `acwr_smooth`   (smoothed ACWR) specified date range.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_acwr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate ACWR Data — calculate_acwr","text":"function fetches activities, calculates daily load using chosen metric, computes Acute Training Load (ATL) Chronic Training Load (CTL), finally calculates raw smoothed ACWR. function provides data used `plot_acwr`. fetches   activity data going back far enough accurately calculate initial   chronic load. Note fetching data can slow period long.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_acwr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate ACWR Data — calculate_acwr","text":"","code":"if (FALSE) { # \\dontrun{ # Requires authentication first: # stoken <- rStrava::strava_oauth(..., cache = TRUE)  # Calculate ACWR for Runs using duration run_acwr <- calculate_acwr(stoken = stoken, activity_type = \"Run\",                            load_metric = \"duration_mins\") print(tail(run_acwr))  # Calculate ACWR for Rides using TSS (requires FTP) ride_acwr_tss <- calculate_acwr(stoken = stoken, activity_type = \"Ride\",                                 load_metric = \"tss\", user_ftp = 280) print(tail(ride_acwr_tss)) } # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_decoupling.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Aerobic Decoupling — calculate_decoupling","title":"Calculate Aerobic Decoupling — calculate_decoupling","text":"Calculates aerobic decoupling Strava activities.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_decoupling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Aerobic Decoupling — calculate_decoupling","text":"","code":"calculate_decoupling(   stoken,   activity_type = c(\"Run\", \"Ride\"),   decouple_metric = c(\"Pace_HR\", \"Power_HR\"),   start_date = NULL,   end_date = NULL,   min_duration_mins = 45,   max_activities = 50,   stream_df = NULL )"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_decoupling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Aerobic Decoupling — calculate_decoupling","text":"stoken valid Strava token `rStrava::strava_oauth()`. activity_type Type(s) activities analyze (e.g., \"Run\", \"Ride\"). decouple_metric Basis calculation: \"Pace_HR\" \"Power_HR\". start_date Optional. Analysis start date (YYYY-MM-DD string Date). Defaults one year ago. end_date Optional. Analysis end date (YYYY-MM-DD string Date). Defaults today. min_duration_mins Minimum activity duration (minutes) include. Default 45. max_activities Maximum number recent activities analyze. Default 50. stream_df Optional. pre-fetched data frame *single* activity's stream. provided, calculates decoupling data directly, ignoring `stoken` fetching parameters. Must include columns: `time`, `heartrate`, either `velocity_smooth`/`distance` (Pace_HR) `watts` (Power_HR).","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_decoupling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Aerobic Decoupling — calculate_decoupling","text":"`stream_df` provided: data frame columns `date`   `decoupling` (percentage) activities meeting criteria.   `stream_df` provided: single numeric value representing   decoupling percentage specific stream.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_decoupling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Aerobic Decoupling — calculate_decoupling","text":"Analyzes heart rate either pace power data activity streams determine percentage decoupling, indicating aerobic fitness changes activity. Requires fetching detailed stream data via Strava API, can slow. function provides data used `plot_decoupling`.   compares efficiency factor (output/heart rate) first   second halves activity. positive decoupling percentage suggests   decline efficiency (.e., heart rate drift).   Fetching streams Strava API can time-consuming subject rate limits.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_decoupling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Aerobic Decoupling — calculate_decoupling","text":"","code":"if (FALSE) { # \\dontrun{ # Requires authentication first: # stoken <- rStrava::strava_oauth(..., cache = TRUE)  # Calculate Pace/HR decoupling for recent Runs (limit to 10 for speed) run_decoupling <- calculate_decoupling(     stoken = stoken,     activity_type = \"Run\",     decouple_metric = \"Pace_HR\",     max_activities = 10 ) print(tail(run_decoupling))  # Example with pre-fetched stream data (replace ... with actual stream df) # single_activity_decoupling <- calculate_decoupling(stream_df = ... , decouple_metric = \"Power_HR\") # print(single_activity_decoupling) } # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_ef.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Efficiency Factor (EF) Data — calculate_ef","title":"Calculate Efficiency Factor (EF) Data — calculate_ef","text":"Fetches Strava activity data, calculates specified Efficiency Factor (EF) metric (Pace/HR Power/HR), returns results data frame.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_ef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Efficiency Factor (EF) Data — calculate_ef","text":"","code":"calculate_ef(   stoken,   activity_type = c(\"Run\", \"Ride\"),   ef_metric = c(\"Pace_HR\", \"Power_HR\"),   start_date = NULL,   end_date = NULL,   min_duration_mins = 20 )"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_ef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Efficiency Factor (EF) Data — calculate_ef","text":"stoken valid Strava token object obtained using rStrava::strava_oauth(). activity_type Character vector single string specifying activity type(s). ef_metric Character string specifying EF metric (\"Pace_HR\" \"Power_HR\"). start_date Optional start date (YYYY-MM-DD string Date object). Defaults one year ago. end_date Optional end date (YYYY-MM-DD string Date object). Defaults today. min_duration_mins Numeric, minimum activity duration minutes. Default 20.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_ef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Efficiency Factor (EF) Data — calculate_ef","text":"data frame columns: date, activity_type, ef_value.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_ef.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Efficiency Factor (EF) Data — calculate_ef","text":"function performs data fetching calculation steps used plot_ef, returning underlying data frame.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_ef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Efficiency Factor (EF) Data — calculate_ef","text":"","code":"if (FALSE) { # \\dontrun{ # Requires authentication first: # stoken <- rStrava::strava_oauth(..., cache = TRUE)  # Calculate Pace/HR EF data for Runs ef_data_run <- calculate_ef(stoken = stoken, activity_type = \"Run\", ef_metric = \"Pace_HR\") print(tail(ef_data_run))  # Calculate Power/HR EF data for Rides ef_data_ride <- calculate_ef(stoken = stoken, activity_type = \"Ride\", ef_metric = \"Power_HR\") print(tail(ef_data_ride)) } # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_exposure.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Training Load Exposure (ATL, CTL, ACWR) — calculate_exposure","title":"Calculate Training Load Exposure (ATL, CTL, ACWR) — calculate_exposure","text":"Calculates training load metrics like ATL, CTL, ACWR Strava data.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_exposure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Training Load Exposure (ATL, CTL, ACWR) — calculate_exposure","text":"","code":"calculate_exposure(   stoken,   activity_type = c(\"Run\", \"Ride\", \"VirtualRide\", \"VirtualRun\"),   load_metric = \"duration_mins\",   acute_period = 7,   chronic_period = 42,   user_ftp = NULL,   user_max_hr = NULL,   user_resting_hr = NULL,   end_date = NULL )"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_exposure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Training Load Exposure (ATL, CTL, ACWR) — calculate_exposure","text":"stoken valid Strava token `rStrava::strava_oauth()`. activity_type Type(s) activities include (e.g., \"Run\", \"Ride\"). Default includes common run/ride types. load_metric Method calculating daily load (e.g., \"duration_mins\", \"distance_km\", \"tss\", \"hrss\"). Default \"duration_mins\". acute_period Days acute load window (e.g., 7). chronic_period Days chronic load window (e.g., 42). Must greater `acute_period`. user_ftp Required `load_metric = \"tss\"`. Functional Threshold Power. user_max_hr Required `load_metric = \"hrss\"`. maximum heart rate. user_resting_hr Required `load_metric = \"hrss\"`. resting heart rate. end_date Optional. Analysis end date (YYYY-MM-DD string Date). Defaults today. analysis period covers `chronic_period` days ending date.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_exposure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Training Load Exposure (ATL, CTL, ACWR) — calculate_exposure","text":"data frame columns: `date`, `daily_load`, `atl` (Acute Load),   `ctl` (Chronic Load), `acwr` (Acute:Chronic Ratio) analysis period.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_exposure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Training Load Exposure (ATL, CTL, ACWR) — calculate_exposure","text":"Fetches activities within specified date range, calculates daily load based chosen metric (e.g., duration, TSS, HRSS), computes Acute Training Load (ATL), Chronic Training Load (CTL), Acute:Chronic Workload Ratio (ACWR). function provides data used `plot_exposure`. automatically   fetches activities longer period analysis start date ensure   initial CTL calculation accurate. Depending chosen `load_metric`,   may need provide `user_ftp` (TSS) `user_max_hr` `user_resting_hr` (HRSS).","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_exposure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Training Load Exposure (ATL, CTL, ACWR) — calculate_exposure","text":"","code":"if (FALSE) { # \\dontrun{ # Requires authentication first: # stoken <- rStrava::strava_oauth(..., cache = TRUE)  # Exposure using TSS for Rides ride_exposure_tss <- calculate_exposure(     stoken = stoken,     activity_type = \"Ride\",     load_metric = \"tss\",     user_ftp = 280,     acute_period = 7,     chronic_period = 28 ) print(head(ride_exposure_tss))  # Exposure using HRSS for Runs run_exposure_hrss <- calculate_exposure(     stoken = stoken,     activity_type = \"Run\",     load_metric = \"hrss\",     user_max_hr = 190,     user_resting_hr = 50 ) print(tail(run_exposure_hrss)) } # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_pbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Personal Bests (PBs) — calculate_pbs","title":"Calculate Personal Bests (PBs) — calculate_pbs","text":"Finds personal best times specified distances Strava activities.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_pbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Personal Bests (PBs) — calculate_pbs","text":"","code":"calculate_pbs(   stoken,   activity_type = \"Run\",   distance_meters,   max_activities = 500,   date_range = NULL )"},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_pbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Personal Bests (PBs) — calculate_pbs","text":"stoken valid Strava token `rStrava::strava_oauth()`. activity_type Type(s) activities search PBs (e.g., \"Run\"). Note: Current logic relies Strava's `best_efforts`, primarily available Runs. distance_meters Numeric vector distances (meters) find PBs (e.g., `c(1000, 5000, 10000)`). max_activities Maximum number recent activities check. Default 500. Reducing can speed process help avoid API rate limits. date_range Optional. Filter activities within date range `c(\"YYYY-MM-DD\", \"YYYY-MM-DD\")`.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_pbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Personal Bests (PBs) — calculate_pbs","text":"data frame containing found best efforts specified distances.   Includes columns: `activity_id`, `activity_date`, `distance`, `time_seconds` (elapsed time),   `cumulative_pb_seconds` (PB distance date), `is_pb` (TRUE effort set new PB),   `distance_label` (e.g., \"5k\"), `time_period` (formatted time).","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_pbs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Personal Bests (PBs) — calculate_pbs","text":"Fetches activities, extracts relevant \"best efforts\" reported Strava activity, determines cumulative personal best time distance date effort. function provides data used `plot_pbs`. processes activities   chronologically correctly identify new PB set.   Requires fetching detailed data activity, can slow subject   API rate limits (1-second delay included activity fetches).","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/calculate_pbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Personal Bests (PBs) — calculate_pbs","text":"","code":"if (FALSE) { # \\dontrun{ # Requires authentication first: # stoken <- rStrava::strava_oauth(..., cache = TRUE)  # Calculate PBs for 1k, 5k, 10k (checking fewer activities for speed) pb_data <- calculate_pbs(stoken = stoken,                             distance_meters = c(1000, 5000, 10000),                            max_activities = 100) print(head(pb_data))  # Show only the efforts that set a new PB new_pbs <- pb_data[pb_data$is_pb, ] print(new_pbs) } # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/fetch_strava_activities.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Fetch and Compile Strava Activities — fetch_strava_activities","title":"(Internal) Fetch and Compile Strava Activities — fetch_strava_activities","text":"Helper function get Strava activity data within date range.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/fetch_strava_activities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Fetch and Compile Strava Activities — fetch_strava_activities","text":"","code":"fetch_strava_activities(   stoken,   start_date = NULL,   end_date = NULL,   fetch_details = FALSE,   required_cols = c(\"average_watts\", \"average_heartrate\"),   delay = 1 )"},{"path":"https://hzaCode.github.io/Athlytics/reference/fetch_strava_activities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Fetch and Compile Strava Activities — fetch_strava_activities","text":"stoken valid Strava token `rStrava::strava_oauth()`. start_date Optional. Start date (YYYY-MM-DD Date/POSIXct) fetching. Defaults ~2009. end_date Optional. End date (YYYY-MM-DD Date/POSIXct) fetching. Defaults now. fetch_details Fetch detailed data activity using `get_activity()`? Needed power/HR metrics much slower uses API calls. Default `FALSE`. required_cols `fetch_details = TRUE`, detailed columns attempt extract (e.g., `c(\"average_watts\", \"average_heartrate\")`). delay Seconds pause `get_activity` calls `fetch_details = TRUE` manage API rate limits. Default 1.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/fetch_strava_activities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Fetch and Compile Strava Activities — fetch_strava_activities","text":"tibble activity data. Columns vary based `fetch_details`.   Includes `date` column derived `start_date_local`.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/fetch_strava_activities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Fetch and Compile Strava Activities — fetch_strava_activities","text":"Retrieves summary list activities optionally fetches detailed data activity needed specific metrics (e.g., power). Intended internal use within package. function wraps `rStrava::get_activity_list`   `rStrava::compile_activities`. `fetch_details` enabled, iteratively   calls `rStrava::get_activity` activity, main performance   bottleneck API usage driver.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_acwr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ACWR Trend — plot_acwr","title":"Plot ACWR Trend — plot_acwr","text":"Visualizes Acute:Chronic Workload Ratio (ACWR) trend time.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_acwr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ACWR Trend — plot_acwr","text":"","code":"plot_acwr(   stoken,   activity_type = NULL,   load_metric = \"duration_mins\",   acute_period = 7,   chronic_period = 28,   start_date = NULL,   end_date = NULL,   user_ftp = NULL,   user_max_hr = NULL,   user_resting_hr = NULL,   smoothing_period = 7,   highlight_zones = TRUE,   acwr_df = NULL )"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_acwr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ACWR Trend — plot_acwr","text":"stoken valid Strava token `rStrava::strava_oauth()`. Required unless `acwr_df` provided. activity_type Optional. Filter activities type (e.g., \"Run\", \"Ride\"). Default `NULL` includes . load_metric Method calculating daily load (e.g., \"duration_mins\", \"tss\", \"hrss\"). Default \"duration_mins\". acute_period Days acute load window (e.g., 7). chronic_period Days chronic load window (e.g., 28). Must > `acute_period`. start_date Optional. Analysis start date (YYYY-MM-DD string Date). Defaults ~1 year ago. end_date Optional. Analysis end date (YYYY-MM-DD string Date). Defaults today. user_ftp Required `load_metric = \"tss\"`. FTP. user_max_hr Required `load_metric = \"hrss\"`. max HR. user_resting_hr Required `load_metric = \"hrss\"`. resting HR. smoothing_period Days smoothing ACWR using rolling mean. Default 7. highlight_zones Add background shading typical ACWR zones (low, optimal, high risk)? Default `TRUE`. acwr_df Optional. pre-calculated data frame `calculate_acwr`. provided, `stoken` calculation parameters ignored.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_acwr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ACWR Trend — plot_acwr","text":"ggplot object visualizing smoothed ACWR trend.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_acwr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot ACWR Trend — plot_acwr","text":"function calculates ACWR based Strava activity data chosen load metric, generates ggplot showing smoothed ACWR trend, optionally typical risk zone shading. `acwr_df` supplied, function first calls `calculate_acwr`   get necessary data. plots smoothed ACWR. Risk zone boundaries   (`highlight_zones = TRUE`) based common conventions (e.g., 0.8-1.3 optimal,   >1.5 high risk) may need adjustment based individual context.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_acwr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ACWR Trend — plot_acwr","text":"","code":"if (FALSE) { # \\dontrun{ # Requires authentication first: # stoken <- rStrava::strava_oauth(..., cache = TRUE)  # Plot ACWR for Runs using duration plot_acwr(stoken = stoken, activity_type = \"Run\", load_metric = \"duration_mins\")  # Plot ACWR for Rides using TSS (requires FTP) plot_acwr(stoken = stoken, activity_type = \"Ride\", load_metric = \"tss\", user_ftp = 280)  # Plot ACWR for all activities using distance, with custom periods plot_acwr(stoken = stoken,           load_metric = \"distance_km\",           acute_period = 10,           chronic_period = 40,           smoothing_period = 10)  # Plot pre-calculated ACWR data # acwr_results <- calculate_acwr(...)  # plot_acwr(acwr_df = acwr_results) } # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_decoupling.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Aerobic Decoupling Trend — plot_decoupling","title":"Plot Aerobic Decoupling Trend — plot_decoupling","text":"Visualizes trend aerobic decoupling time.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_decoupling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Aerobic Decoupling Trend — plot_decoupling","text":"","code":"plot_decoupling(   stoken,   activity_type = c(\"Run\", \"Ride\"),   decouple_metric = c(\"Pace_HR\", \"Power_HR\"),   start_date = NULL,   end_date = NULL,   min_duration_mins = 45,   max_activities = 50,   add_trend_line = TRUE,   smoothing_method = \"loess\",   decoupling_df = NULL )"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_decoupling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Aerobic Decoupling Trend — plot_decoupling","text":"stoken valid Strava token `rStrava::strava_oauth()`. Required unless `decoupling_df` provided. activity_type Type(s) activities analyze (e.g., \"Run\", \"Ride\"). decouple_metric Metric basis: \"Pace_HR\" \"Power_HR\". start_date Optional. Analysis start date (YYYY-MM-DD string Date). Defaults ~1 year ago. end_date Optional. Analysis end date (YYYY-MM-DD string Date). Defaults today. min_duration_mins Minimum activity duration (minutes) include. Default 45. max_activities Max number recent activities fetch/analyze. Default 50. add_trend_line Add smoothed trend line (`geom_smooth`)? Default `TRUE`. smoothing_method Smoothing method trend line (e.g., \"loess\", \"lm\"). Default \"loess\". decoupling_df Optional. pre-calculated data frame `calculate_decoupling`. provided, `stoken` calculation parameters ignored.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_decoupling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Aerobic Decoupling Trend — plot_decoupling","text":"ggplot object showing decoupling percentage trend. Lower values   generally indicate better aerobic endurance.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_decoupling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Aerobic Decoupling Trend — plot_decoupling","text":"Calculates uses pre-calculated aerobic decoupling data (heart rate drift relative pace power) creates ggplot showing trend. Fetching required data can slow. Aerobic decoupling reflects changes efficiency (Output/HR)   activity. calculated : (EF_1st_half - EF_2nd_half) / EF_1st_half * 100.   Positive values indicate HR drift. common reference threshold 5 **Warning:** data provided via `decoupling_df`, function calls   `calculate_decoupling`, fetches detailed activity streams Strava.   can slow hit API rate limits.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_decoupling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Aerobic Decoupling Trend — plot_decoupling","text":"","code":"if (FALSE) { # \\dontrun{ # Requires authentication first: # stoken <- rStrava::strava_oauth(..., cache = TRUE)  # Plot Pace/HR decoupling for recent Runs (limit to 30) plot_decoupling(stoken = stoken,                 activity_type = \"Run\",                 decouple_metric = \"Pace_HR\",                 max_activities = 30)  # Plot Power/HR decoupling for recent Rides plot_decoupling(stoken = stoken,                 activity_type = \"Ride\",                 decouple_metric = \"Power_HR\")  # Plot pre-calculated decoupling data # decoupling_results <- calculate_decoupling(...) # plot_decoupling(decoupling_df = decoupling_results) } # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_ef.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Efficiency Factor (EF) Trend — plot_ef","title":"Plot Efficiency Factor (EF) Trend — plot_ef","text":"Visualizes trend Efficiency Factor (EF) time.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_ef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Efficiency Factor (EF) Trend — plot_ef","text":"","code":"plot_ef(   stoken,   activity_type = c(\"Run\", \"Ride\"),   ef_metric = c(\"Pace_HR\", \"Power_HR\"),   start_date = NULL,   end_date = NULL,   min_duration_mins = 20,   add_trend_line = TRUE,   smoothing_method = \"loess\",   ef_df = NULL )"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_ef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Efficiency Factor (EF) Trend — plot_ef","text":"stoken valid Strava token `rStrava::strava_oauth()`. Required unless `ef_df` provided. activity_type Type(s) activities analyze (e.g., \"Run\", \"Ride\"). ef_metric Metric calculate: \"Pace_HR\" (Speed/HR) \"Power_HR\" (Power/HR). start_date Optional. Analysis start date (YYYY-MM-DD string Date). Defaults ~1 year ago. end_date Optional. Analysis end date (YYYY-MM-DD string Date). Defaults today. min_duration_mins Minimum activity duration (minutes) include. Default 20. add_trend_line Add smoothed trend line (`geom_smooth`)? Default `TRUE`. smoothing_method Smoothing method trend line (e.g., \"loess\", \"lm\"). Default \"loess\". ef_df Optional. pre-calculated data frame `calculate_ef`. provided, `stoken` calculation parameters ignored.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_ef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Efficiency Factor (EF) Trend — plot_ef","text":"ggplot object showing EF trend. Higher values generally indicate   better aerobic efficiency.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_ef.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Efficiency Factor (EF) Trend — plot_ef","text":"Calculates uses pre-calculated Efficiency Factor data (Output/Input ratio, typically Pace/HR Power/HR) creates ggplot showing trend. Efficiency Factor (EF) measures output (speed power) relative input (heart rate).   upward trend often suggests improved aerobic fitness. function plots EF calculated   average values activity. Activities lacking necessary data (HR, power/distance)   excluded. `ef_df` supplied, function first calls `calculate_ef`.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_ef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Efficiency Factor (EF) Trend — plot_ef","text":"","code":"if (FALSE) { # \\dontrun{ # Requires authentication first: # stoken <- rStrava::strava_oauth(..., cache = TRUE)  # Plot Pace/HR EF for Runs (last 6 months) plot_ef(stoken = stoken,         activity_type = \"Run\",         ef_metric = \"Pace_HR\",         start_date = Sys.Date() - months(6))  # Plot Power/HR EF for Rides plot_ef(stoken = stoken,         activity_type = \"Ride\",         ef_metric = \"Power_HR\")  # Plot Pace/HR EF for multiple run types, no trend line plot_ef(stoken = stoken,         activity_type = c(\"Run\", \"VirtualRun\"),         ef_metric = \"Pace_HR\",         add_trend_line = FALSE)  # Plot pre-calculated EF data # ef_results <- calculate_ef(...) # plot_ef(ef_df = ef_results) } # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_exposure.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Training Load Exposure (ATL vs CTL) — plot_exposure","title":"Plot Training Load Exposure (ATL vs CTL) — plot_exposure","text":"Visualizes relationship Acute Chronic Training Load.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_exposure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Training Load Exposure (ATL vs CTL) — plot_exposure","text":"","code":"plot_exposure(   stoken,   activity_type = c(\"Run\", \"Ride\", \"VirtualRide\", \"VirtualRun\"),   load_metric = \"duration_mins\",   acute_period = 7,   chronic_period = 42,   user_ftp = NULL,   user_max_hr = NULL,   user_resting_hr = NULL,   end_date = NULL,   risk_zones = TRUE,   exposure_df = NULL )"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_exposure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Training Load Exposure (ATL vs CTL) — plot_exposure","text":"stoken valid Strava token `rStrava::strava_oauth()`. Required unless `exposure_df` provided. activity_type Type(s) activities include (e.g., \"Run\", \"Ride\"). Default uses common types. load_metric Method calculating daily load (e.g., \"duration_mins\", \"tss\", \"hrss\"). Default \"duration_mins\". See `calculate_exposure` details approximate TSS/HRSS calculations. acute_period Days acute load window (e.g., 7). chronic_period Days chronic load window (e.g., 42). Must > `acute_period`. user_ftp Required `load_metric = \"tss\"`. FTP. user_max_hr Required `load_metric = \"hrss\"`. max HR. user_resting_hr Required `load_metric = \"hrss\"`. resting HR. end_date Optional. Analysis end date (YYYY-MM-DD string Date). Defaults today. risk_zones Add background shading typical ACWR risk zones? Default `TRUE`. exposure_df Optional. pre-calculated data frame `calculate_exposure`. provided, `stoken` calculation parameters ignored. Must contain `date`, `atl`, `ctl` (`acwr` `risk_zones = TRUE`).","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_exposure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Training Load Exposure (ATL vs CTL) — plot_exposure","text":"ggplot object visualizing ATL vs CTL, colored date, latest point highlighted.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_exposure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Training Load Exposure (ATL vs CTL) — plot_exposure","text":"Calculates uses pre-calculated training load data (ATL CTL based chosen metric) create scatter plot showing ATL vs CTL time. Optionally shades regions corresponding different ACWR-based risk zones. plot, often called Performance Management Chart (PMC) variation,   helps visualize training state. Points diagonal line (ACWR=1) indicate   acute load exceeds chronic load. `risk_zones = TRUE`, lines representing ACWR   thresholds (e.g., 0.8, 1.3, 1.5) added delineate zones like \"Sweet Spot\"   \"High Risk\". `exposure_df` supplied, function first calls `calculate_exposure`.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_exposure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Training Load Exposure (ATL vs CTL) — plot_exposure","text":"","code":"if (FALSE) { # \\dontrun{ # Requires authentication first: # stoken <- rStrava::strava_oauth(..., cache = TRUE)  # Plot exposure using duration for default activities plot_exposure(stoken = stoken)  # Plot exposure using TSS for Rides (7/28 day periods) plot_exposure(stoken = stoken, activity_type = \"Ride\", load_metric = \"tss\",               user_ftp = 280, acute_period = 7, chronic_period = 28)  # Plot exposure using HRSS for Runs plot_exposure(stoken = stoken, activity_type = \"Run\", load_metric = \"hrss\",               user_max_hr = 190, user_resting_hr = 50)  # Plot pre-calculated exposure data # exposure_results <- calculate_exposure(...) # plot_exposure(exposure_df = exposure_results) } # }"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_pbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Personal Best (PB) Trends — plot_pbs","title":"Plot Personal Best (PB) Trends — plot_pbs","text":"Visualizes trend personal best times specific running distances.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_pbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Personal Best (PB) Trends — plot_pbs","text":"","code":"plot_pbs(   stoken,   activity_type = \"Run\",   distance_meters,   max_activities = 500,   date_range = NULL,   pbs_df = NULL )"},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_pbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Personal Best (PB) Trends — plot_pbs","text":"stoken valid Strava token `rStrava::strava_oauth()`. Required unless `pbs_df` provided. activity_type Type(s) activities search (e.g., \"Run\"). Default \"Run\". distance_meters Numeric vector distances (meters) plot PBs (e.g., `c(1000, 5000)`). Relies Strava's `best_efforts` data. max_activities Max number recent activities check. Default 500. Reduce speed. date_range Optional. Filter activities date `c(\"YYYY-MM-DD\", \"YYYY-MM-DD\")`. pbs_df Optional. pre-calculated data frame `calculate_pbs`. provided, `stoken` calculation parameters ignored.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_pbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Personal Best (PB) Trends — plot_pbs","text":"ggplot object showing PB trends. multiple distances provided,   plot faceted distance.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_pbs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Personal Best (PB) Trends — plot_pbs","text":"Fetches uses pre-calculated PB data create ggplot showing best effort times selected distances time. Points marking new personal best highlighted. function visualizes output `calculate_pbs`. point represents   best time achieved distance specific activity. Solid points indicate   effort set new cumulative PB time. y-axis formatted MM:SS. `pbs_df` supplied, function first calls `calculate_pbs`, can slow   due fetching detailed activity data.","code":""},{"path":"https://hzaCode.github.io/Athlytics/reference/plot_pbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Personal Best (PB) Trends — plot_pbs","text":"","code":"if (FALSE) { # \\dontrun{ # Requires authentication first: # stoken <- rStrava::strava_oauth(..., cache = TRUE)  # Plot PBs for 1k, 5k, 10k plot_pbs(stoken = stoken, distance_meters = c(1000, 5000, 10000))  # Plot PBs for Mile and Half Marathon for 2023 plot_pbs(stoken = stoken,          distance_meters = c(1609, 21097),          date_range = c(\"2023-01-01\", \"2023-12-31\"))  # Plot pre-calculated PB data # pb_results <- calculate_pbs(...) # plot_pbs(pbs_df = pb_results) } # }"}]
